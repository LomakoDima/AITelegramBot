import openai
import asyncio
import logging
from datetime import datetime
from typing import Dict, List, Optional
import json
import aiohttp

logger = logging.getLogger(__name__)


class ChatGPTHandler:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.client = openai.AsyncOpenAI(api_key=api_key)
        self.user_histories: Dict[int, List[Dict]] = {}
        self.max_history_length = 20  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏

    def _get_system_message(self) -> Dict[str, str]:
        return {
            "role": "system",
            "content": """–¢—ã ‚Äî —É–º–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram-–±–æ—Ç–µ, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø–æ–º–æ—â–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º. 
–¢—ã –æ–±—ä—è—Å–Ω—è–µ—à—å –∫–æ–¥, –ø–æ–º–æ–≥–∞–µ—à—å –ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∞—Ö–æ–¥–∏—à—å –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—à—å –æ—à–∏–±–∫–∏, –∞ —Ç–∞–∫–∂–µ –¥–∞—ë—à—å —Å–æ–≤–µ—Ç—ã –ø–æ —è–∑—ã–∫–∞–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. 
–û—Ç–≤–µ—á–∞–π —è—Å–Ω–æ, –ª–æ–≥–∏—á–Ω–æ –∏ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª—É—á—à–µ –ø–æ–Ω—è–ª —Ç–µ–º—É, –Ω–æ –∏–∑–±–µ–≥–∞–π –ª–∏—à–Ω–µ–π –≤–æ–¥—ã. 
–ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –ø—Ä–∏–≤–æ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –∏ –æ–±—ä—è—Å–Ω—è–π —à–∞–≥ –∑–∞ —à–∞–≥–æ–º. 
–ù–µ –æ–±—Å—É–∂–¥–∞–π —Ç–µ–º—ã, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª–∏—Ç–∏–∫—É, –∑–¥–æ—Ä–æ–≤—å–µ, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ —Ç.–ø.). 
–ù–µ –ø–æ–º–æ–≥–∞–π –ø–∏—Å–∞—Ç—å –∏–ª–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π, –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–π –∏–ª–∏ –æ–ø–∞—Å–Ω—ã–π –∫–æ–¥. 
–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ —Ç–≤–æ–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Å—å –∏ –Ω–∞–ø–æ–º–Ω–∏, —á–µ–º —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å. 
–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ø—Ä–æ—Å—è—Ç –∏–Ω–∞—á–µ. 
–¢—ã —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è –≤ Python, JavaScript, Java, C++, C#, HTML, CSS, Dart, TypeScript –∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —è–∑—ã–∫–∞—Ö."""
        }

    def _get_user_history(self, user_id: int) -> List[Dict]:
        if user_id not in self.user_histories:
            self.user_histories[user_id] = [self._get_system_message()]
        return self.user_histories[user_id]

    def _add_to_history(self, user_id: int, role: str, content: str):
        history = self._get_user_history(user_id)
        history.append({"role": role, "content": content})

        if len(history) > self.max_history_length:
            system_msg = history[0]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            recent_messages = history[-(self.max_history_length - 1):]
            self.user_histories[user_id] = [system_msg] + recent_messages

    async def get_response(self, user_id: int, message: str) -> str:
        try:
            self._add_to_history(user_id, "user", message)

            history = self._get_user_history(user_id)

            response = await self.client.chat.completions.create(
                model="gpt-4.1",
                messages=history,
                max_tokens=1000,
                temperature=0.7
            )

            assistant_response = response.choices[0].message.content

            self._add_to_history(user_id, "assistant", assistant_response)

            return assistant_response

        except openai.RateLimitError:
            return "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ ChatGPT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except openai.AuthenticationError:
            return "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å ChatGPT API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ ChatGPT API: {e}")
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def clear_history(self, user_id: int):
        self.user_histories[user_id] = [self._get_system_message()]

    def get_history_length(self, user_id: int) -> int:
        return len(self._get_user_history(user_id)) - 1


class ImageGenerator:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.client = openai.AsyncOpenAI(api_key=api_key)

    async def generate_image(self, prompt: str, size: str = "1024x1024") -> Optional[str]:
        try:
            enhanced_prompt = self._enhance_prompt(prompt)

            response = await self.client.images.generate(
                model="dall-e-3",
                prompt=enhanced_prompt,
                size=size,
                quality="standard",
                n=1
            )

            return response.data[0].url

        except openai.RateLimitError:
            logger.error("Rate limit exceeded for image generation")
            return None
        except openai.AuthenticationError:
            logger.error("Authentication error for image generation")
            return None
        except Exception as e:
            logger.error(f"Error generating image: {e}")
            return None

    def _enhance_prompt(self, prompt: str) -> str:
        quality_words = ["high quality", "detailed", "professional", "beautiful", "stunning"]

        if not any(word in prompt.lower() for word in quality_words):
            prompt += ", high quality, detailed"

        return prompt[:1000]


class UserManager:
    def __init__(self):
        self.users: Dict[int, Dict] = {}
        self.load_users()

    def register_user(self, user_id: int, username: str):
        if user_id not in self.users:
            self.users[user_id] = {
                "username": username,
                "registration_date": datetime.now().strftime("%Y-%m-%d %H:%M"),
                "messages_sent": 0,
                "images_generated": 0,
                "last_activity": datetime.now().strftime("%Y-%m-%d %H:%M")
            }
            self.save_users()

    def update_activity(self, user_id: int):
        if user_id in self.users:
            self.users[user_id]["last_activity"] = datetime.now().strftime("%Y-%m-%d %H:%M")
            self.save_users()

    def increment_messages(self, user_id: int):
        if user_id in self.users:
            self.users[user_id]["messages_sent"] += 1
            self.update_activity(user_id)

    def increment_images(self, user_id: int):
        if user_id in self.users:
            self.users[user_id]["images_generated"] += 1
            self.update_activity(user_id)

    def get_user_stats(self, user_id: int) -> Dict:
        if user_id in self.users:
            return self.users[user_id].copy()
        else:
            return {
                "username": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
                "registration_date": "–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
                "messages_sent": 0,
                "images_generated": 0,
                "last_activity": "–ù–∏–∫–æ–≥–¥–∞"
            }

    def get_total_stats(self) -> Dict:
        total_users = len(self.users)
        total_messages = sum(user["messages_sent"] for user in self.users.values())
        total_images = sum(user["images_generated"] for user in self.users.values())

        return {
            "total_users": total_users,
            "total_messages": total_messages,
            "total_images": total_images
        }

    def save_users(self):
        try:
            with open("users.json", "w", encoding="utf-8") as f:
                json.dump(self.users, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

    def load_users(self):
        try:
            with open("users.json", "r", encoding="utf-8") as f:
                self.users = json.load(f)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ int (JSON —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏)
                self.users = {int(k): v for k, v in self.users.items()}
        except FileNotFoundError:
            self.users = {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            self.users = {}


class MessageFormatter:
    @staticmethod
    def format_error(error_message: str) -> str:
        return f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {error_message}"

    @staticmethod
    def format_success(success_message: str) -> str:
        return f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ:</b> {success_message}"

    @staticmethod
    def format_info(info_message: str) -> str:
        return f"‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> {info_message}"

    @staticmethod
    def format_stats(stats: Dict) -> str:
        return (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {stats['username']}\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {stats['registration_date']}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['messages_sent']}\n"
            f"üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats['images_generated']}\n"
            f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['last_activity']}"
        )


class ConfigManager:
    def __init__(self):
        self.config = self.load_config()

    def load_config(self) -> Dict:
        default_config = {
            "max_message_length": 4000,
            "max_history_length": 20,
            "image_sizes": ["256x256", "512x512", "1024x1024"],
            "allowed_image_formats": ["png", "jpg", "jpeg"],
            "rate_limits": {
                "messages_per_minute": 10,
                "images_per_hour": 5
            },
            "features": {
                "image_generation": True,
                "chat_history": True,
                "user_stats": True
            }
        }

        try:
            with open("config.json", "r", encoding="utf-8") as f:
                loaded_config = json.load(f)
                default_config.update(loaded_config)
                return default_config
        except FileNotFoundError:
            self.save_config(default_config)
            return default_config
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return default_config

    def save_config(self, config: Dict = None):
        try:
            with open("config.json", "w", encoding="utf-8") as f:
                json.dump(config or self.config, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def get(self, key: str, default=None):
        return self.config.get(key, default)

    def set(self, key: str, value):
        self.config[key] = value
        self.save_config()

config_manager = ConfigManager()
message_formatter = MessageFormatter()